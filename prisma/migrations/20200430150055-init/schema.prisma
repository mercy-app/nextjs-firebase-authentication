datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "node_modules/typegraphql-prisma/generator.js"
  output   = "../src/prisma/generated/type-graphql"
}

model Country {
  id       String @default(cuid()) @id
  code     Int    @unique
  name     String
  currency String
}

model Staff {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  role      String
  createdAt DateTime @default(now())

  @@id([companyId, userId])
}

model Address {
  id        String   @default(cuid()) @id
  type      String
  name      String
  json      String?
  info      String
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}

model Card {
  id            String @default(cuid()) @id
  type          String
  cardType      String
  name          String
  lastFourDigit Int
  userId        String
  user          User   @relation(fields: [userId], references: [id])
}

model Contact {
  id        String   @default(cuid()) @id
  type      String
  number    String
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}

model Customer {
  userId           String
  user             User    @relation(fields: [userId], references: [id])
  companyId        String
  company          Company @relation(fields: [companyId], references: [id])
  totalOrder       Int
  totalOrderAmount Int

  @@id([companyId, userId])
}

model ProductsOnCounpon {
  product   Product  @relation(fields: [productId], references: [id])
  // relation scalar field (used in the `@relation` attribute above)
  productId String
  coupon    Coupon   @relation(fields: [couponId], references: [id])
  // relation scalar field (used in the `@relation` attribute above)
  couponId  String
  createdAt DateTime @default(now())

  @@id([productId, couponId])
}

model Coupon {
  id                   String              @default(cuid()) @id
  title                String
  code                 String
  discountInPercent    Int
  numberOfCoupon       Int
  numberOfUnusedCoupon Int
  status               String
  expirationDate       DateTime
  createdAt            DateTime            @default(now())
  products             ProductsOnCounpon[]
}

model User {
  id        String    @unique
  email     String    @unique
  name      String?
  posts     Post[]
  companies Company[]
  addresses Address[]
  cards     Card[]
  contacts  Contact[]
}

model Company {
  id          String     @default(cuid()) @id
  name        String
  description String
  address     Address
  contact     Contact
  ownerId     String?
  platformId  String
  platform    Platform   @relation(fields: [platformId], references: [id])
  owner       User?      @relation(fields: [ownerId], references: [id])
  countryId   String?
  country     Country?   @relation(fields: [countryId], references: [id])
  products    Product[]
  customerId  String?
  staffs      Staff[]
  customers   Customer[]
}

model Post {
  id         String              @default(cuid()) @id
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  published  Boolean
  title      String
  content    String?
  author     User?               @relation(fields: [authorId], references: [id])
  authorId   String?
  categories CategoriesOnPosts[]
  tags       TagsOnPosts[]
}

model Product {
  id                String                 @default(cuid()) @id
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  published         Boolean
  title             String
  company           Company                @relation(fields: [companyId], references: [id])
  companyId         String
  categories        CategoriesOnProducts[]
  price             Float?
  platform          Platform               @relation(fields: [platformId], references: [id])
  platformId        String
  tags              TagsOnProducts[]
  orders            OrderItem[]
  slug              String                 @unique
  unit              String?
  salePrice         Float?
  discountInPercent Int?
  description       String?
  type              String
  image             String
}

model Category {
  id         String                 @default(cuid()) @id
  name       String
  slug       String                 @unique
  type       String
  icon       String
  categoryId String?
  parent     Category?              @relation("ParentCategories", fields: [categoryId], references: [id])
  children   Category[]             @relation("ParentCategories")
  posts      CategoriesOnPosts[]
  products   CategoriesOnProducts[]
  platformId String
  platform   Platform               @relation(fields: [platformId], references: [id])
}

model Tag {
  id       String           @default(cuid()) @id
  name     String
  posts    TagsOnPosts[]
  products TagsOnProducts[]
}

model CategoriesOnPosts {
  post       Post     @relation(fields: [postId], references: [id])
  // relation scalar field (used in the `@relation` attribute above)
  postId     String
  category   Category @relation(fields: [categoryId], references: [id])
  // relation scalar field (used in the `@relation` attribute above)
  categoryId String
  createdAt  DateTime @default(now())

  @@id([postId, categoryId])
}

model CategoriesOnProducts {
  product    Product  @relation(fields: [productId], references: [id])
  // relation scalar field (used in the `@relation` attribute above)
  productId  String
  category   Category @relation(fields: [categoryId], references: [id])
  // relation scalar field (used in the `@relation` attribute above)
  categoryId String
  createdAt  DateTime @default(now())

  @@id([productId, categoryId])
}

model TagsOnProducts {
  product   Product  @relation(fields: [productId], references: [id])
  // relation scalar field (used in the `@relation` attribute above)
  productId String
  tag       Tag      @relation(fields: [tagId], references: [id])
  // relation scalar field (used in the `@relation` attribute above)
  tagId     String
  createdAt DateTime @default(now())

  @@id([productId, tagId])
}

model TagsOnPosts {
  post      Post     @relation(fields: [postId], references: [id])
  // relation scalar field (used in the `@relation` attribute above)
  postId    String
  tag       Tag      @relation(fields: [tagId], references: [id])
  // relation scalar field (used in the `@relation` attribute above)
  tagId     String
  createdAt DateTime @default(now())

  @@id([postId, tagId])
}

enum PlatformType {
  ECOMMERCE
  BOOKING_HR
  BOOKING_DATE
}

model Platform {
  id           String     @default(cuid()) @id
  title        String
  link         String
  label        String
  icon         String
  intlId       String
  bannerImg    String
  typeSlug     String     @unique
  content      String?
  products     Product[]
  categories   Category[]
  platformType String
  countryId    String
  country      Country    @relation(fields: [countryId], references: [id])
}

model Room {
  id        String    @default(cuid()) @id
  capacity  Int
  name      String
  productId String
  product   Product   @relation(fields: [productId], references: [id])
  bookings  Booking[]
}

model Booking {
  id           String   @default(cuid()) @id
  bookingStart DateTime
  bookingEnd   DateTime
  startHour    Int
  duration     Int
  recurring    String[]
  roomId       String
  room         Room     @relation(fields: [roomId], references: [id])
}

enum Status {
  PENDING
  PAID
  COMPLETED
}

model Order {
  id              String      @default(cuid()) @id
  status          Status
  amount          Float
  products        OrderItem[]
  companyId       String
  company         Company     @relation(fields: [companyId], references: [id])
  deliveryTime    DateTime
  createdAt       DateTime    @default(now())
  paymentMethod   String
  deliveryAddress String
  contactNumber   String
  subtotal        Float
  discount        Float
  deliveryFee     Float
}

model OrderItem {
  product   Product  @relation(fields: [productId], references: [id])
  // relation scalar field (used in the `@relation` attribute above)
  productId String
  order     Order    @relation(fields: [orderId], references: [id])
  // relation scalar field (used in the `@relation` attribute above)
  orderId   String
  createdAt DateTime @default(now())

  @@id([productId, orderId])
}